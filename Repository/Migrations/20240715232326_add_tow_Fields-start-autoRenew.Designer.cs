// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data.Context;

namespace Repository.Migrations
{
    [DbContext(typeof(SonnyDbContext))]
    [Migration("20240715232326_add_tow_Fields-start-autoRenew")]
    partial class add_tow_FieldsstartautoRenew
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("Domain.Entities.Authentication.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("aspnetUserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Fill.StkProduct.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PD_Items_Fillers");
                });

            modelBuilder.Entity("Domain.Entities.Fill.StkProduct.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("PD_Manufacturers_Fillers");
                });

            modelBuilder.Entity("Domain.Entities.Fill.StkProduct.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("PD_Models_Fillers");
                });

            modelBuilder.Entity("Domain.Entities.Fill.StkProduct.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("PD_Segments_Fillers");
                });

            modelBuilder.Entity("Domain.Entities.Finances.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .HasColumnType("longtext");

                    b.Property<string>("Agency")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Holder")
                        .HasColumnType("longtext");

                    b.Property<string>("Institution")
                        .HasColumnType("longtext");

                    b.Property<string>("ManagerContact")
                        .HasColumnType("longtext");

                    b.Property<string>("ManagerName")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("FN_BankAccount");
                });

            modelBuilder.Entity("Domain.Entities.Finances.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int>("CVC")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Flag")
                        .HasColumnType("longtext");

                    b.Property<string>("Holder")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Limit")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("Validate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("FN_Cards");
                });

            modelBuilder.Entity("Domain.Entities.Finances.ExpensesNotPredictable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DaySpent")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EntryRegister")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ItemOrPlaceName")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CardId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("FN_ExpensesNotPredictable");
                });

            modelBuilder.Entity("Domain.Entities.Finances.MonthFixedExpenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LinkCopyBill")
                        .HasColumnType("longtext");

                    b.Property<int>("NameId")
                        .HasColumnType("int");

                    b.Property<string>("NameIdentification")
                        .HasColumnType("longtext");

                    b.Property<string>("PASSLinkCopyBill")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("USERLinkCopyBill")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NameId");

                    b.ToTable("FN_MonthFixedExpenses");
                });

            modelBuilder.Entity("Domain.Entities.Finances.MonthFixedExpensesFillers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ExpensesName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ExpensesName")
                        .IsUnique();

                    b.ToTable("FN_MonthFixedExpenses_Fillers");
                });

            modelBuilder.Entity("Domain.Entities.Finances.MonthFixedExpensesTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Interest")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("MonthFixedExpensesId")
                        .HasColumnType("int");

                    b.Property<string>("OthersPaymentMethods")
                        .HasColumnType("longtext");

                    b.Property<int?>("PixId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WasPaid")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CardId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MonthFixedExpensesId");

                    b.HasIndex("PixId");

                    b.HasIndex("UserId");

                    b.ToTable("FN_MonthFixedExpensesTrackings");
                });

            modelBuilder.Entity("Domain.Entities.Finances.Pix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("FN_Pixes");
                });

            modelBuilder.Entity("Domain.Entities.Finances.YearlyFixedExpenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LinkCopyBill")
                        .HasColumnType("longtext");

                    b.Property<int>("NameId")
                        .HasColumnType("int");

                    b.Property<string>("NameIdentification")
                        .HasColumnType("longtext");

                    b.Property<string>("PASSLinkCopyBill")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("USERLinkCopyBill")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NameId");

                    b.ToTable("FN_YearlyFixedExpenses");
                });

            modelBuilder.Entity("Domain.Entities.Finances.YearlyFixedExpensesFillers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ExpensesName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ExpensesName")
                        .IsUnique();

                    b.ToTable("FN_YearlyFixedExpenses_Fillers");
                });

            modelBuilder.Entity("Domain.Entities.Finances.YearlyFixedExpensesTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Interest")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("OthersPaymentMethods")
                        .HasColumnType("longtext");

                    b.Property<int?>("PixId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("WasPaid")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("YearlyFixedExpensesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CardId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PixId");

                    b.HasIndex("UserId");

                    b.HasIndex("YearlyFixedExpensesId");

                    b.ToTable("FN_YearlyFixedExpensesTrackings");
                });

            modelBuilder.Entity("Domain.Entities.Main.Companies.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactId");

                    b.ToTable("MN_Companies");
                });

            modelBuilder.Entity("Domain.Entities.Main.Customers.AdditionalCosts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("FixedPhysicallyMovingCosts")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("MN_AdditionalCosts");
                });

            modelBuilder.Entity("Domain.Entities.Main.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdditionalCostsId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<bool>("Assured")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BusinessLine")
                        .HasColumnType("longtext");

                    b.Property<string>("CNPJ")
                        .HasColumnType("longtext");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("Expiration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Payment")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("PhysicallyMovingCostsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Responsible")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalCostsId");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PhysicallyMovingCostsId");

                    b.ToTable("MN_Customers");
                });

            modelBuilder.Entity("Domain.Entities.Main.Inheritances.PhysicallyMovingCosts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Apps")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Fuel")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("MotoBoy")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PublicTransport")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("MN_PhysicallyMovingCosts");
                });

            modelBuilder.Entity("Domain.Entities.Main.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessLine")
                        .HasColumnType("longtext");

                    b.Property<string>("CNPJ")
                        .HasColumnType("longtext");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("PartnerBusiness")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentsDataId")
                        .HasColumnType("int");

                    b.Property<int?>("PhysicallyMovingCostsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Responsible")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PaymentsDataId");

                    b.HasIndex("PhysicallyMovingCostsId");

                    b.ToTable("MN_Partners");
                });

            modelBuilder.Entity("Domain.Entities.Main.Partners.PartnerPaymentBankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .HasColumnType("longtext");

                    b.Property<string>("Agency")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Holder")
                        .HasColumnType("longtext");

                    b.Property<string>("Institution")
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentDataId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentDataId");

                    b.ToTable("MN_PartnerPaymentBankAccounts");
                });

            modelBuilder.Entity("Domain.Entities.Main.Partners.PartnerPaymentPix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Holder")
                        .HasColumnType("longtext");

                    b.Property<string>("Key")
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentDataId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PaymentDataId");

                    b.ToTable("MN_PartnerPaymentPixes");
                });

            modelBuilder.Entity("Domain.Entities.Main.PaymentData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Money")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Others")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MN_PaymentsData");
                });

            modelBuilder.Entity("Domain.Entities.Outsourced.BillingFrom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Base")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("OS_BillingsFroms");
                });

            modelBuilder.Entity("Domain.Entities.Outsourced.CollectDeliver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BillingFromId")
                        .HasColumnType("int");

                    b.Property<bool>("Collect")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ContactName")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Deliver")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("KindTransport")
                        .HasColumnType("longtext");

                    b.Property<bool>("Other")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SubjectReason")
                        .HasColumnType("longtext");

                    b.Property<string>("TaskOverView")
                        .HasColumnType("longtext");

                    b.Property<int?>("TransporterId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillingFromId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransporterId");

                    b.HasIndex("UserId");

                    b.ToTable("OS_CollectsDelivers");
                });

            modelBuilder.Entity("Domain.Entities.Outsourced.Destiny", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CollectDeliverId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("NoRegisterAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("NoRegisterName")
                        .HasColumnType("longtext");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollectDeliverId")
                        .IsUnique();

                    b.HasIndex("CustomerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("OS_Destinies");
                });

            modelBuilder.Entity("Domain.Entities.Outsourced.ElectronicRepair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Item")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordEquipament")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Problem")
                        .HasColumnType("longtext");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.Property<string>("SolutionApplied")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserEquipament")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("OS_ElectronicsRepairs");
                });

            modelBuilder.Entity("Domain.Entities.Profile.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("UserProfileImage")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Domain.Entities.ServicesBench.BudgetService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CollectsDeliversCostsId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DataDescription")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ExecutionMode")
                        .HasColumnType("int");

                    b.Property<string>("IsPresentVisuallyDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ProblemAccordingCustomer")
                        .HasColumnType("longtext");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StatusService")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollectsDeliversCostsId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("BS_BudgetsServices");
                });

            modelBuilder.Entity("Domain.Entities.ServicesBench.CollectDeliverCosts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CostFrom")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("RoundTrip")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("BS_CollectsDeliversCosts");
                });

            modelBuilder.Entity("Domain.Entities.ServicesBench.Repair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExecutedServicesComments")
                        .HasColumnType("longtext");

                    b.Property<int>("ExecutionMode")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceService")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("RepairStatus")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("BS_Repairs");
                });

            modelBuilder.Entity("Domain.Entities.ServicesBench.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Finished")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("IsAuthorized")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BS_Services");
                });

            modelBuilder.Entity("Domain.Entities.ServicesBench.TableProvidedServicePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceService")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ServiceName")
                        .IsUnique();

                    b.ToTable("BS_TableProvidedServicesPrices");
                });

            modelBuilder.Entity("Domain.Entities.Shared.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Complement")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .HasColumnType("longtext");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SD_Addresses");
                });

            modelBuilder.Entity("Domain.Entities.Shared.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cel")
                        .HasColumnType("longtext");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Landline")
                        .HasColumnType("longtext");

                    b.Property<string>("Site")
                        .HasColumnType("longtext");

                    b.Property<string>("Zap")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SD_Contacts");
                });

            modelBuilder.Entity("Domain.Entities.Shared.SocialNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("SD_socialnetworks");
                });

            modelBuilder.Entity("Domain.Entities.StkProduct.Equipament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Segment")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Model")
                        .IsUnique();

                    b.ToTable("PD_Equipaments");
                });

            modelBuilder.Entity("Domain.Entities.StkProduct.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("EquipamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EquipamentId");

                    b.ToTable("PD_Products");
                });

            modelBuilder.Entity("Domain.Entities.StkProduct.Quantity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("IsReserved")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsTested")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NfNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservedOrSoldByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Sn")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("SoldDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("SoldPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("UsedHistorical")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("WarrantyEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("WarrantyEndLocal")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReservedOrSoldByUserId");

                    b.HasIndex("Sn")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("PD_Quantities");
                });

            modelBuilder.Entity("Domain.Entities.StkProduct.Tracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("NfNumber")
                        .HasColumnType("longtext");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Sn")
                        .HasColumnType("longtext");

                    b.Property<decimal>("SoldPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("PD_Trackings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("aspnetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("aspnetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("aspnetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("aspnetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("aspnetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Entities.Authentication.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<int>");

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("Domain.Entities.Authentication.MyUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<int>");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Group")
                        .HasColumnType("longtext");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("ProfileId");

                    b.HasDiscriminator().HasValue("MyUser");
                });

            modelBuilder.Entity("Domain.Entities.Authentication.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Authentication.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Authentication.MyUser", "MyUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MyUser");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Fill.StkProduct.Item", b =>
                {
                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany("Item_Fillers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.Fill.StkProduct.Manufacturer", b =>
                {
                    b.HasOne("Domain.Entities.Fill.StkProduct.Item", "Item")
                        .WithMany("Manufacturers")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Domain.Entities.Fill.StkProduct.Model", b =>
                {
                    b.HasOne("Domain.Entities.Fill.StkProduct.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Domain.Entities.Fill.StkProduct.Segment", b =>
                {
                    b.HasOne("Domain.Entities.Fill.StkProduct.Item", "Item")
                        .WithMany("Segments")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Domain.Entities.Finances.BankAccount", b =>
                {
                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany("BankAccounts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.Finances.Card", b =>
                {
                    b.HasOne("Domain.Entities.Finances.BankAccount", "BankAccount")
                        .WithMany("Cards")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("Domain.Entities.Finances.ExpensesNotPredictable", b =>
                {
                    b.HasOne("Domain.Entities.Finances.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Finances.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("Domain.Entities.Main.Customers.Customer", "Customer")
                        .WithMany("ExpensesNotPredictables")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Authentication.MyUser", "User")
                        .WithMany("ExpensesNotPredictables")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Card");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Finances.MonthFixedExpenses", b =>
                {
                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany("MonthFixedExpenses")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Finances.MonthFixedExpensesFillers", "Name")
                        .WithMany("MonthFixedExpenses")
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Domain.Entities.Finances.MonthFixedExpensesFillers", b =>
                {
                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany("MonthFixedExpensesFillers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.Finances.MonthFixedExpensesTracking", b =>
                {
                    b.HasOne("Domain.Entities.Finances.BankAccount", "BankAccount")
                        .WithMany("MonthFixedExpensesTrackings")
                        .HasForeignKey("BankAccountId");

                    b.HasOne("Domain.Entities.Finances.Card", "Card")
                        .WithMany("MonthFixedExpensesTrackings")
                        .HasForeignKey("CardId");

                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany("MonthFixedExpensesTrackings")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Finances.MonthFixedExpenses", "MonthFixedExpenses")
                        .WithMany("MonthFixedExpensesTrackings")
                        .HasForeignKey("MonthFixedExpensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Finances.Pix", "Pix")
                        .WithMany("MonthFixedExpensesTrackings")
                        .HasForeignKey("PixId");

                    b.HasOne("Domain.Entities.Authentication.MyUser", "User")
                        .WithMany("MonthFixedExpensesTrackings")
                        .HasForeignKey("UserId");

                    b.Navigation("BankAccount");

                    b.Navigation("Card");

                    b.Navigation("Company");

                    b.Navigation("MonthFixedExpenses");

                    b.Navigation("Pix");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Finances.Pix", b =>
                {
                    b.HasOne("Domain.Entities.Finances.BankAccount", "BankAccount")
                        .WithMany("Pixes")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("Domain.Entities.Finances.YearlyFixedExpenses", b =>
                {
                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Finances.YearlyFixedExpensesFillers", "Name")
                        .WithMany("YearlyFixedExpenses")
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Domain.Entities.Finances.YearlyFixedExpensesFillers", b =>
                {
                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.Finances.YearlyFixedExpensesTracking", b =>
                {
                    b.HasOne("Domain.Entities.Finances.BankAccount", "BankAccount")
                        .WithMany("YearlyFixedExpensesTrackings")
                        .HasForeignKey("BankAccountId");

                    b.HasOne("Domain.Entities.Finances.Card", "Card")
                        .WithMany("YearlyFixedExpensesTrackings")
                        .HasForeignKey("CardId");

                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Finances.Pix", "Pix")
                        .WithMany("YearlyFixedExpensesTrackings")
                        .HasForeignKey("PixId");

                    b.HasOne("Domain.Entities.Authentication.MyUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Domain.Entities.Finances.YearlyFixedExpenses", "YearlyFixedExpenses")
                        .WithMany("YearlyFixedExpensesTrackings")
                        .HasForeignKey("YearlyFixedExpensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Card");

                    b.Navigation("Company");

                    b.Navigation("Pix");

                    b.Navigation("User");

                    b.Navigation("YearlyFixedExpenses");
                });

            modelBuilder.Entity("Domain.Entities.Main.Companies.Company", b =>
                {
                    b.HasOne("Domain.Entities.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Domain.Entities.Shared.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Address");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Domain.Entities.Main.Customers.Customer", b =>
                {
                    b.HasOne("Domain.Entities.Main.Customers.AdditionalCosts", "AdditionalCosts")
                        .WithMany()
                        .HasForeignKey("AdditionalCostsId");

                    b.HasOne("Domain.Entities.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany("Customers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Shared.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Domain.Entities.Main.Inheritances.PhysicallyMovingCosts", "PhysicallyMovingCosts")
                        .WithMany()
                        .HasForeignKey("PhysicallyMovingCostsId");

                    b.Navigation("AdditionalCosts");

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("PhysicallyMovingCosts");
                });

            modelBuilder.Entity("Domain.Entities.Main.Partner", b =>
                {
                    b.HasOne("Domain.Entities.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany("Partners")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Shared.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Domain.Entities.Main.PaymentData", "PaymentsData")
                        .WithMany()
                        .HasForeignKey("PaymentsDataId");

                    b.HasOne("Domain.Entities.Main.Inheritances.PhysicallyMovingCosts", "PhysicallyMovingCosts")
                        .WithMany()
                        .HasForeignKey("PhysicallyMovingCostsId");

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("PaymentsData");

                    b.Navigation("PhysicallyMovingCosts");
                });

            modelBuilder.Entity("Domain.Entities.Main.Partners.PartnerPaymentBankAccount", b =>
                {
                    b.HasOne("Domain.Entities.Main.PaymentData", "PaymentData")
                        .WithMany("BanksAccounts")
                        .HasForeignKey("PaymentDataId");

                    b.Navigation("PaymentData");
                });

            modelBuilder.Entity("Domain.Entities.Main.Partners.PartnerPaymentPix", b =>
                {
                    b.HasOne("Domain.Entities.Main.PaymentData", "PaymentData")
                        .WithMany("Pixes")
                        .HasForeignKey("PaymentDataId");

                    b.Navigation("PaymentData");
                });

            modelBuilder.Entity("Domain.Entities.Outsourced.BillingFrom", b =>
                {
                    b.HasOne("Domain.Entities.Main.Customers.Customer", "Customer")
                        .WithMany("BillingFromCollectsDelivers")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entities.Main.Partner", "Partner")
                        .WithMany("BillingFromCollectsDelivers")
                        .HasForeignKey("PartnerId");

                    b.Navigation("Customer");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Domain.Entities.Outsourced.CollectDeliver", b =>
                {
                    b.HasOne("Domain.Entities.Outsourced.BillingFrom", "BillingFrom")
                        .WithMany()
                        .HasForeignKey("BillingFromId");

                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany("CollectsDelivers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Main.Partner", "Transporter")
                        .WithMany("CollectDeliversTransporters")
                        .HasForeignKey("TransporterId");

                    b.HasOne("Domain.Entities.Authentication.MyUser", "User")
                        .WithMany("CollectsDelivers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingFrom");

                    b.Navigation("Company");

                    b.Navigation("Transporter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Outsourced.Destiny", b =>
                {
                    b.HasOne("Domain.Entities.Outsourced.CollectDeliver", "CollectDeliver")
                        .WithOne("Destiny")
                        .HasForeignKey("Domain.Entities.Outsourced.Destiny", "CollectDeliverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Main.Customers.Customer", "Customer")
                        .WithMany("CollectDeliverDestinies")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entities.Main.Partner", "Partner")
                        .WithMany("CollectDeliverDestinies")
                        .HasForeignKey("PartnerId");

                    b.Navigation("CollectDeliver");

                    b.Navigation("Customer");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Domain.Entities.Outsourced.ElectronicRepair", b =>
                {
                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany("ElectronicsRepairs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Main.Customers.Customer", "Customer")
                        .WithMany("ElectronicsRepairs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Main.Partner", "ServiceProvider")
                        .WithMany("ElectronicsRepairs")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Authentication.MyUser", "User")
                        .WithMany("ElectronicsRepairs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("ServiceProvider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ServicesBench.BudgetService", b =>
                {
                    b.HasOne("Domain.Entities.ServicesBench.CollectDeliverCosts", "CollectsDeliversCosts")
                        .WithMany()
                        .HasForeignKey("CollectsDeliversCostsId");

                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany("ServicesExecuted")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Main.Customers.Customer", "Customer")
                        .WithMany("ServicesExecuted")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ServicesBench.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("Domain.Entities.Authentication.MyUser", "User")
                        .WithMany("BudgetsServices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CollectsDeliversCosts");

                    b.Navigation("Company");

                    b.Navigation("Customer");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ServicesBench.Repair", b =>
                {
                    b.HasOne("Domain.Entities.ServicesBench.Service", "Service")
                        .WithMany("Repairs")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entities.ServicesBench.Service", b =>
                {
                    b.HasOne("Domain.Entities.Authentication.MyUser", "User")
                        .WithMany("Services")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ServicesBench.TableProvidedServicePrice", b =>
                {
                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany("TableProvidedServicesPrices")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.Shared.SocialNetwork", b =>
                {
                    b.HasOne("Domain.Entities.Shared.Contact", "Contact")
                        .WithMany("SocialMedias")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Domain.Entities.StkProduct.Product", b =>
                {
                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StkProduct.Equipament", "Equipament")
                        .WithMany()
                        .HasForeignKey("EquipamentId");

                    b.Navigation("Company");

                    b.Navigation("Equipament");
                });

            modelBuilder.Entity("Domain.Entities.StkProduct.Quantity", b =>
                {
                    b.HasOne("Domain.Entities.Main.Customers.Customer", "Customer")
                        .WithMany("ProductsQuantities")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.StkProduct.Product", "Product")
                        .WithMany("Quantities")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Authentication.MyUser", "ReservedOrSoldByUser")
                        .WithMany("ProductsReserveds")
                        .HasForeignKey("ReservedOrSoldByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Main.Partner", "Supplier")
                        .WithMany("ProductsQuantities")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("ReservedOrSoldByUser");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Domain.Entities.StkProduct.Tracking", b =>
                {
                    b.HasOne("Domain.Entities.Main.Customers.Customer", "Customer")
                        .WithMany("Trackings")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entities.StkProduct.Product", "Product")
                        .WithMany("Trackings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ServicesBench.BudgetService", "Service")
                        .WithMany("HardwareIncludedInServices")
                        .HasForeignKey("ServiceId");

                    b.HasOne("Domain.Entities.Authentication.MyUser", "User")
                        .WithMany("Trackings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Authentication.MyUser", b =>
                {
                    b.HasOne("Domain.Entities.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Domain.Entities.Main.Companies.Company", "Company")
                        .WithMany("MyUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Shared.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("Domain.Entities.Profile.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Domain.Entities.Fill.StkProduct.Item", b =>
                {
                    b.Navigation("Manufacturers");

                    b.Navigation("Segments");
                });

            modelBuilder.Entity("Domain.Entities.Finances.BankAccount", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("MonthFixedExpensesTrackings");

                    b.Navigation("Pixes");

                    b.Navigation("YearlyFixedExpensesTrackings");
                });

            modelBuilder.Entity("Domain.Entities.Finances.Card", b =>
                {
                    b.Navigation("MonthFixedExpensesTrackings");

                    b.Navigation("YearlyFixedExpensesTrackings");
                });

            modelBuilder.Entity("Domain.Entities.Finances.MonthFixedExpenses", b =>
                {
                    b.Navigation("MonthFixedExpensesTrackings");
                });

            modelBuilder.Entity("Domain.Entities.Finances.MonthFixedExpensesFillers", b =>
                {
                    b.Navigation("MonthFixedExpenses");
                });

            modelBuilder.Entity("Domain.Entities.Finances.Pix", b =>
                {
                    b.Navigation("MonthFixedExpensesTrackings");

                    b.Navigation("YearlyFixedExpensesTrackings");
                });

            modelBuilder.Entity("Domain.Entities.Finances.YearlyFixedExpenses", b =>
                {
                    b.Navigation("YearlyFixedExpensesTrackings");
                });

            modelBuilder.Entity("Domain.Entities.Finances.YearlyFixedExpensesFillers", b =>
                {
                    b.Navigation("YearlyFixedExpenses");
                });

            modelBuilder.Entity("Domain.Entities.Main.Companies.Company", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("CollectsDelivers");

                    b.Navigation("Customers");

                    b.Navigation("ElectronicsRepairs");

                    b.Navigation("Item_Fillers");

                    b.Navigation("MonthFixedExpenses");

                    b.Navigation("MonthFixedExpensesFillers");

                    b.Navigation("MonthFixedExpensesTrackings");

                    b.Navigation("MyUsers");

                    b.Navigation("Partners");

                    b.Navigation("Products");

                    b.Navigation("ServicesExecuted");

                    b.Navigation("TableProvidedServicesPrices");
                });

            modelBuilder.Entity("Domain.Entities.Main.Customers.Customer", b =>
                {
                    b.Navigation("BillingFromCollectsDelivers");

                    b.Navigation("CollectDeliverDestinies");

                    b.Navigation("ElectronicsRepairs");

                    b.Navigation("ExpensesNotPredictables");

                    b.Navigation("ProductsQuantities");

                    b.Navigation("ServicesExecuted");

                    b.Navigation("Trackings");
                });

            modelBuilder.Entity("Domain.Entities.Main.Partner", b =>
                {
                    b.Navigation("BillingFromCollectsDelivers");

                    b.Navigation("CollectDeliverDestinies");

                    b.Navigation("CollectDeliversTransporters");

                    b.Navigation("ElectronicsRepairs");

                    b.Navigation("ProductsQuantities");
                });

            modelBuilder.Entity("Domain.Entities.Main.PaymentData", b =>
                {
                    b.Navigation("BanksAccounts");

                    b.Navigation("Pixes");
                });

            modelBuilder.Entity("Domain.Entities.Outsourced.CollectDeliver", b =>
                {
                    b.Navigation("Destiny");
                });

            modelBuilder.Entity("Domain.Entities.ServicesBench.BudgetService", b =>
                {
                    b.Navigation("HardwareIncludedInServices");
                });

            modelBuilder.Entity("Domain.Entities.ServicesBench.Service", b =>
                {
                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("Domain.Entities.Shared.Contact", b =>
                {
                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("Domain.Entities.StkProduct.Product", b =>
                {
                    b.Navigation("Quantities");

                    b.Navigation("Trackings");
                });

            modelBuilder.Entity("Domain.Entities.Authentication.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Authentication.MyUser", b =>
                {
                    b.Navigation("BudgetsServices");

                    b.Navigation("CollectsDelivers");

                    b.Navigation("ElectronicsRepairs");

                    b.Navigation("ExpensesNotPredictables");

                    b.Navigation("MonthFixedExpensesTrackings");

                    b.Navigation("ProductsReserveds");

                    b.Navigation("Services");

                    b.Navigation("Trackings");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
