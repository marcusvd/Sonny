// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data.Context;

namespace Repository.Migrations
{
    [DbContext(typeof(SonnyDbContext))]
    partial class SonnyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("Domain.Entities.BudgetBench.BenchToCashBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("PriceService")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ProblemByTechnician")
                        .HasColumnType("longtext");

                    b.Property<int>("ServiceBenchId")
                        .HasColumnType("int");

                    b.Property<bool>("Solved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("TechnicalSolutionApplied")
                        .HasColumnType("longtext");

                    b.Property<string>("Technician")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ServiceBenchId");

                    b.ToTable("BenchToCashBox");
                });

            modelBuilder.Entity("Domain.Entities.BudgetBench.ServiceBench", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateServiceFinished")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateServiceStarted")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Finished")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Remote")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RemoteAccessData")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("Visually")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ServicesBench");
                });

            modelBuilder.Entity("Domain.Entities.BudgetBench.ServiceBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Authorized")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("BenchStartedIn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("BudgetStartedIn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ClientProblems")
                        .HasColumnType("longtext");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("RemoteAccessData")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<string>("Visually")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ServicesBudgets");
                });

            modelBuilder.Entity("Domain.Entities.BudgetBench.SolutionPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("DateService")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("PriceService")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ProblemByTechnician")
                        .HasColumnType("longtext");

                    b.Property<bool>("Remote")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ServiceBudgetId")
                        .HasColumnType("int");

                    b.Property<string>("TechnicalSolution")
                        .HasColumnType("longtext");

                    b.Property<string>("Technician")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ServiceBudgetId");

                    b.ToTable("SolutionsPrices");
                });

            modelBuilder.Entity("Domain.Entities.CollectDeliver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<int?>("DestinyCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("DestinyCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DestinyNoRegisterAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("DestinyNoRegisterName")
                        .HasColumnType("longtext");

                    b.Property<int?>("DestinyPartnerId")
                        .HasColumnType("int");

                    b.Property<string>("Items")
                        .HasColumnType("longtext");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("SourceCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("SourceCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("SourceNoRegisterAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("SourceNoRegisterName")
                        .HasColumnType("longtext");

                    b.Property<int?>("SourcePartnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.Property<int?>("TransporterId")
                        .HasColumnType("int");

                    b.Property<string>("TransporterNoregisterd")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DestinyCompanyId");

                    b.HasIndex("DestinyCustomerId");

                    b.HasIndex("DestinyPartnerId");

                    b.HasIndex("SourceCompanyId");

                    b.HasIndex("SourceCustomerId");

                    b.HasIndex("SourcePartnerId");

                    b.HasIndex("TransporterId");

                    b.ToTable("CollectsDelivers");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<bool>("Assured")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CNPJ")
                        .HasColumnType("longtext");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<bool>("CustomerType")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("Expiration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Payment")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Responsible")
                        .HasColumnType("longtext");

                    b.Property<bool>("ToBusinessBox")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Entities.EletronicRepair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Authorized")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Finished")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Item")
                        .HasColumnType("longtext");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .HasColumnType("longtext");

                    b.Property<string>("User")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("day")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("solution")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("EletronicsRepairs");
                });

            modelBuilder.Entity("Domain.Entities.Equipament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Equipaments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Processadores"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Memórias"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Armazenamento"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fonte"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Placa Mãe"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Monitor"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Teclado"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Mouse"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Cooler"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Placa de Video"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Placa de rede"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Adaptador"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Financial.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CheckCode")
                        .HasColumnType("int");

                    b.Property<int>("CheckingAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Flag")
                        .HasColumnType("longtext");

                    b.Property<string>("Holder")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Limit")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Validate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CheckingAccountId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("Domain.Entities.Financial.CheckingAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .HasColumnType("longtext");

                    b.Property<string>("Agency")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Holder")
                        .HasColumnType("longtext");

                    b.Property<string>("Institution")
                        .HasColumnType("longtext");

                    b.Property<string>("ManagerContact")
                        .HasColumnType("longtext");

                    b.Property<string>("ManagerName")
                        .HasColumnType("longtext");

                    b.Property<string>("Pix")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CheckingAccounts");
                });

            modelBuilder.Entity("Domain.Entities.Financial.EssentialExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<string>("CyclePayment")
                        .HasColumnType("longtext");

                    b.Property<string>("Duplicate")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("User")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EssentialsExpenses");
                });

            modelBuilder.Entity("Domain.Entities.Financial.EssentialExpenseValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<int>("EssentialExpenseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Paid")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("EssentialExpenseId");

                    b.ToTable("EssentialExpenseValue");
                });

            modelBuilder.Entity("Domain.Entities.Financial.FinancingLoan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<string>("Duplicate")
                        .HasColumnType("longtext");

                    b.Property<int>("Expiration")
                        .HasColumnType("int");

                    b.Property<int>("Installment")
                        .HasColumnType("int");

                    b.Property<string>("Institution")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Started")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("User")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("FinancingsLoans");
                });

            modelBuilder.Entity("Domain.Entities.Financial.TypePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TypesPayments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pagamento em espécie.",
                            Name = "Dinheiro"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Pix"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Débito",
                            Name = "Débito"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Credito",
                            Name = "Credito"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ImgPath", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("NetworkDeviceId")
                        .HasColumnType("int");

                    b.Property<string>("img")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("NetworkDeviceId");

                    b.ToTable("ImgPath");
                });

            modelBuilder.Entity("Domain.Entities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Capacity")
                        .HasColumnType("longtext");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Driver")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EquipamentId")
                        .HasColumnType("int");

                    b.Property<string>("Generation")
                        .HasColumnType("longtext");

                    b.Property<string>("Historical")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsNew")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Istested")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manufactorer")
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .HasColumnType("longtext");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Saleprice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Sn")
                        .HasColumnType("longtext");

                    b.Property<bool>("Sold")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("SoldDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Speed")
                        .HasColumnType("longtext");

                    b.Property<int>("Warranty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipamentId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Domain.Entities.NetworkDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apps")
                        .HasColumnType("longtext");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Connectivity")
                        .HasColumnType("longtext");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Door")
                        .HasColumnType("longtext");

                    b.Property<string>("Equipament")
                        .HasColumnType("longtext");

                    b.Property<string>("Ip")
                        .HasColumnType("longtext");

                    b.Property<string>("Mac")
                        .HasColumnType("longtext");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("PhysicalLocation")
                        .HasColumnType("longtext");

                    b.Property<string>("Sn")
                        .HasColumnType("longtext");

                    b.Property<string>("ToSeach")
                        .HasColumnType("longtext");

                    b.Property<string>("User")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("NetworkDevices");
                });

            modelBuilder.Entity("Domain.Entities.OsRemoveEquipament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Client")
                        .HasColumnType("longtext");

                    b.Property<string>("Equipament")
                        .HasColumnType("longtext");

                    b.Property<string>("Model")
                        .HasColumnType("longtext");

                    b.Property<string>("Problem")
                        .HasColumnType("longtext");

                    b.Property<string>("Pwd")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Usr")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("OsRemoveEquipament");
                });

            modelBuilder.Entity("Domain.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("BusinessLine")
                        .HasColumnType("longtext");

                    b.Property<string>("CNPJ")
                        .HasColumnType("longtext");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Responsible")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactId");

                    b.ToTable("Partners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BusinessLine = "Desenvolvimento de softwares e supporte a redes",
                            CNPJ = "",
                            Comments = "",
                            Name = "BaseDeTroca",
                            Registered = new DateTime(2022, 11, 29, 16, 34, 55, 947, DateTimeKind.Local).AddTicks(7055),
                            Responsible = "Marcus Vinícius Dias"
                        },
                        new
                        {
                            Id = 2,
                            BusinessLine = "Venda de hardware",
                            CNPJ = "",
                            Comments = "",
                            Name = "Oppen Informática",
                            Registered = new DateTime(2022, 11, 29, 16, 34, 55, 948, DateTimeKind.Local).AddTicks(6156),
                            Responsible = "Juliano"
                        },
                        new
                        {
                            Id = 3,
                            BusinessLine = "Venda de hardware",
                            CNPJ = "",
                            Comments = "",
                            Name = "Oficina dos Bits",
                            Registered = new DateTime(2022, 11, 29, 16, 34, 55, 948, DateTimeKind.Local).AddTicks(6178),
                            Responsible = "Claudio Nogueira"
                        },
                        new
                        {
                            Id = 4,
                            BusinessLine = "Assistência técnica, aluguel e venda de periféricos e impressoras",
                            CNPJ = "",
                            Comments = "",
                            Name = "Perfect print",
                            Registered = new DateTime(2022, 11, 29, 16, 34, 55, 948, DateTimeKind.Local).AddTicks(6182),
                            Responsible = "Luiz Junior"
                        },
                        new
                        {
                            Id = 5,
                            BusinessLine = "Motoboy faz e desfaz qualquer treta!",
                            CNPJ = "",
                            Comments = "De confiança!",
                            Name = "Marcelinho Motoca",
                            Registered = new DateTime(2022, 11, 29, 16, 34, 55, 948, DateTimeKind.Local).AddTicks(6184),
                            Responsible = "Marcelo Duarte"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Shared.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Complement")
                        .HasColumnType("longtext");

                    b.Property<string>("District")
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .HasColumnType("longtext");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Belo Horizonte",
                            Complement = "",
                            District = "Santa Efigênia",
                            Number = "123",
                            State = "MG",
                            Street = "R. Padre Rolim",
                            ZipCode = "31255-080"
                        },
                        new
                        {
                            Id = 2,
                            City = "Belo Horizonte",
                            Complement = " sala 801",
                            District = "Floresta",
                            Number = "32",
                            State = "MG",
                            Street = " R. Curvelo",
                            ZipCode = "31015-172"
                        },
                        new
                        {
                            Id = 3,
                            City = "Belo Horizonte",
                            Complement = "",
                            District = "Funcionários",
                            Number = "446",
                            State = "MG",
                            Street = "Av. Getúlio Vargas",
                            ZipCode = "30112-020"
                        },
                        new
                        {
                            Id = 4,
                            City = "Belo Horizonte",
                            Complement = "",
                            District = "Pompéia",
                            Number = "95",
                            State = "MG",
                            Street = "R. Veredinha",
                            ZipCode = "30280-520"
                        },
                        new
                        {
                            Id = 5,
                            City = "Belo Horizonte",
                            Complement = "",
                            District = "Horizontes",
                            Number = "4678",
                            State = "MG",
                            Street = "R. Camanducaia",
                            ZipCode = "98989-4856"
                        },
                        new
                        {
                            Id = 6,
                            City = "-------------",
                            Complement = "",
                            District = "-------------",
                            Number = "-------------",
                            State = "-------------",
                            Street = "-------------",
                            ZipCode = "-------------"
                        },
                        new
                        {
                            Id = 7,
                            City = "Belo Horizonte",
                            Complement = "",
                            District = "Milionários",
                            Number = "25",
                            State = "MG",
                            Street = " R. Maringá",
                            ZipCode = "30620-270"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Shared.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cel")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Landline")
                        .HasColumnType("longtext");

                    b.Property<string>("Site")
                        .HasColumnType("longtext");

                    b.Property<string>("Zap")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Cel = "(31) 9-8859-8734",
                            Email = "lucas@laenderevianna.com.br",
                            Landline = "(31) 2516-2327",
                            Zap = "(31) 9-8859-8734"
                        },
                        new
                        {
                            Id = 3,
                            Cel = "(31) 9-9851-1532",
                            Email = "oppen@oppeninformatica.com.br",
                            Landline = "(31) 3234-4661",
                            Zap = "(31) 9-9851-1532"
                        },
                        new
                        {
                            Id = 4,
                            Cel = "(31) 9-9851-1532",
                            Email = "oppen@oppeninformatica.com.br",
                            Landline = "(31) 3234-4661",
                            Zap = "(31) 9-9851-1532"
                        },
                        new
                        {
                            Id = 5,
                            Cel = "(31) 9-8553-2934",
                            Email = "comercial@perfectprint.com.br",
                            Landline = "(31) 3272-7620",
                            Zap = "(31) 9-8553-2934"
                        },
                        new
                        {
                            Id = 6,
                            Cel = "(31) 9-9999-9999",
                            Email = "marcelo@marcelomotoca.com.br",
                            Landline = "(31) 9999-9999",
                            Zap = "(31) 9-9999-9999"
                        },
                        new
                        {
                            Id = 7,
                            Cel = "-------------",
                            Email = "-------------",
                            Landline = "-------------",
                            Zap = "-------------"
                        },
                        new
                        {
                            Id = 8,
                            Cel = "",
                            Email = "comercial@comercialrosasantos.com.br",
                            Landline = "(31) 2512-6346",
                            Zap = ""
                        });
                });

            modelBuilder.Entity("Domain.Entities.SocialNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("socialnetworks");
                });

            modelBuilder.Entity("Domain.Entities.BudgetBench.BenchToCashBox", b =>
                {
                    b.HasOne("Domain.Entities.BudgetBench.ServiceBench", "ServiceBench")
                        .WithMany("ListBenchToCashBox")
                        .HasForeignKey("ServiceBenchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceBench");
                });

            modelBuilder.Entity("Domain.Entities.BudgetBench.ServiceBench", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("ServicesBenchs")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.BudgetBench.ServiceBudget", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("ServicesBudgets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.BudgetBench.SolutionPrice", b =>
                {
                    b.HasOne("Domain.Entities.BudgetBench.ServiceBudget", "ServiceBudget")
                        .WithMany("SolutionsPrices")
                        .HasForeignKey("ServiceBudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceBudget");
                });

            modelBuilder.Entity("Domain.Entities.CollectDeliver", b =>
                {
                    b.HasOne("Domain.Entities.Company", "DestinyCompany")
                        .WithMany("DestinyCollectsDelivers")
                        .HasForeignKey("DestinyCompanyId");

                    b.HasOne("Domain.Entities.Customer", "DestinyCustomer")
                        .WithMany("DestinyCollectDelivers")
                        .HasForeignKey("DestinyCustomerId");

                    b.HasOne("Domain.Entities.Partner", "DestinyPartner")
                        .WithMany("DestinyCollectDelivers")
                        .HasForeignKey("DestinyPartnerId");

                    b.HasOne("Domain.Entities.Company", "SourceCompany")
                        .WithMany("SourceCollectsDelivers")
                        .HasForeignKey("SourceCompanyId");

                    b.HasOne("Domain.Entities.Customer", "SourceCustomer")
                        .WithMany("SourceCollectDelivers")
                        .HasForeignKey("SourceCustomerId");

                    b.HasOne("Domain.Entities.Partner", "SourcePartner")
                        .WithMany("SourceCollectDelivers")
                        .HasForeignKey("SourcePartnerId");

                    b.HasOne("Domain.Entities.Partner", "Transporter")
                        .WithMany("TransporterCollectDelivers")
                        .HasForeignKey("TransporterId");

                    b.Navigation("DestinyCompany");

                    b.Navigation("DestinyCustomer");

                    b.Navigation("DestinyPartner");

                    b.Navigation("SourceCompany");

                    b.Navigation("SourceCustomer");

                    b.Navigation("SourcePartner");

                    b.Navigation("Transporter");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.HasOne("Domain.Entities.Shared.Address", "Address")
                        .WithMany("Companies")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Shared.Contact", "Contact")
                        .WithMany("Companies")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.HasOne("Domain.Entities.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Domain.Entities.Shared.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Address");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Domain.Entities.EletronicRepair", b =>
                {
                    b.HasOne("Domain.Entities.Partner", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Domain.Entities.Financial.Card", b =>
                {
                    b.HasOne("Domain.Entities.Financial.CheckingAccount", "CheckingAccount")
                        .WithMany("Cards")
                        .HasForeignKey("CheckingAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckingAccount");
                });

            modelBuilder.Entity("Domain.Entities.Financial.EssentialExpenseValue", b =>
                {
                    b.HasOne("Domain.Entities.Financial.EssentialExpense", "EssentialExpense")
                        .WithMany("EssentialsExpensesValues")
                        .HasForeignKey("EssentialExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EssentialExpense");
                });

            modelBuilder.Entity("Domain.Entities.ImgPath", b =>
                {
                    b.HasOne("Domain.Entities.NetworkDevice", null)
                        .WithMany("Images")
                        .HasForeignKey("NetworkDeviceId");
                });

            modelBuilder.Entity("Domain.Entities.Inventory", b =>
                {
                    b.HasOne("Domain.Entities.Equipament", "Equipament")
                        .WithMany("Inventories")
                        .HasForeignKey("EquipamentId");

                    b.HasOne("Domain.Entities.Partner", "Partner")
                        .WithMany("Inventories")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipament");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("Domain.Entities.NetworkDevice", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("NetworksDevices")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Partner", b =>
                {
                    b.HasOne("Domain.Entities.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Domain.Entities.Shared.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Address");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Domain.Entities.SocialNetwork", b =>
                {
                    b.HasOne("Domain.Entities.Shared.Contact", null)
                        .WithMany("socialnetworks")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("Domain.Entities.BudgetBench.ServiceBench", b =>
                {
                    b.Navigation("ListBenchToCashBox");
                });

            modelBuilder.Entity("Domain.Entities.BudgetBench.ServiceBudget", b =>
                {
                    b.Navigation("SolutionsPrices");
                });

            modelBuilder.Entity("Domain.Entities.Company", b =>
                {
                    b.Navigation("DestinyCollectsDelivers");

                    b.Navigation("SourceCollectsDelivers");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("DestinyCollectDelivers");

                    b.Navigation("NetworksDevices");

                    b.Navigation("ServicesBenchs");

                    b.Navigation("ServicesBudgets");

                    b.Navigation("SourceCollectDelivers");
                });

            modelBuilder.Entity("Domain.Entities.Equipament", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Domain.Entities.Financial.CheckingAccount", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Domain.Entities.Financial.EssentialExpense", b =>
                {
                    b.Navigation("EssentialsExpensesValues");
                });

            modelBuilder.Entity("Domain.Entities.NetworkDevice", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Domain.Entities.Partner", b =>
                {
                    b.Navigation("DestinyCollectDelivers");

                    b.Navigation("Inventories");

                    b.Navigation("SourceCollectDelivers");

                    b.Navigation("TransporterCollectDelivers");
                });

            modelBuilder.Entity("Domain.Entities.Shared.Address", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Domain.Entities.Shared.Contact", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("socialnetworks");
                });
#pragma warning restore 612, 618
        }
    }
}
