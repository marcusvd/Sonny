{"ast":null,"code":"import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n\n\nclass MatTreeNode extends _MatTreeNodeBase {\n  constructor(elementRef, tree, tabIndex) {\n    super(elementRef, tree);\n    this.tabIndex = Number(tabIndex) || 0;\n  } // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n}\n\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n  return new (t || MatTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNode,\n  selectors: [[\"mat-tree-node\"]],\n  hostAttrs: [1, \"mat-tree-node\"],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matTreeNode\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: MatTreeNode\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }],\n      host: {\n        'class': 'mat-tree-node'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.CdkTree\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, null);\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\n\n\nclass MatTreeNodeDef extends CdkTreeNodeDef {}\n\nMatTreeNodeDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTreeNodeDef_BaseFactory;\n  return function MatTreeNodeDef_Factory(t) {\n    return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n  };\n}();\n\nMatTreeNodeDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodeDef,\n  selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"matTreeNodeDefWhen\", \"when\"],\n    data: [\"matTreeNode\", \"data\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeDef,\n    useExisting: MatTreeNodeDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: ['when: matTreeNodeDefWhen'],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n\n\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n  constructor(elementRef, tree, differs, tabIndex) {\n    super(elementRef, tree, differs);\n    this._disabled = false;\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n  /** Whether the node is disabled. */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Tabindex for the node. */\n\n\n  get tabIndex() {\n    return this.disabled ? -1 : this._tabIndex;\n  }\n\n  set tabIndex(value) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  } // This is a workaround for https://github.com/angular/angular/issues/19145\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n}\n\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n  return new (t || MatNestedTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatNestedTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatNestedTreeNode,\n  selectors: [[\"mat-nested-tree-node\"]],\n  hostAttrs: [1, \"mat-nested-tree-node\"],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    node: [\"matNestedTreeNode\", \"node\"]\n  },\n  exportAs: [\"matNestedTreeNode\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkNestedTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CdkTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: MatNestedTreeNode\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }],\n      host: {\n        'class': 'mat-nested-tree-node'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.CdkTree\n    }, {\n      type: i0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }],\n    disabled: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n\n\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  get level() {\n    return this._level;\n  }\n\n  set level(value) {\n    this._setLevelInput(value);\n  }\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n\n\n  get indent() {\n    return this._indent;\n  }\n\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n\n}\n\nMatTreeNodePadding.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTreeNodePadding_BaseFactory;\n  return function MatTreeNodePadding_Factory(t) {\n    return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n  };\n}();\n\nMatTreeNodePadding.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodePadding,\n  selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"matTreeNodePadding\", \"level\"],\n    indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodePadding,\n    useExisting: MatTreeNodePadding\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['matTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n\n\nclass MatTreeNodeOutlet {\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n\n}\n\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n  return new (t || MatTreeNodeOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\n\nMatTreeNodeOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodeOutlet,\n  selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: MatTreeNodeOutlet\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n\n\nclass MatTree extends CdkTree {}\n\nMatTree.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTree_BaseFactory;\n  return function MatTree_Factory(t) {\n    return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = i0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n  };\n}();\n\nMatTree.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatTree,\n  selectors: [[\"mat-tree\"]],\n  viewQuery: function MatTree_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"],\n  exportAs: [\"matTree\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTree,\n    useExisting: MatTree\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"matTreeNodeOutlet\", \"\"]],\n  template: function MatTree_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [MatTreeNodeOutlet],\n  styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: `<ng-container matTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'mat-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }],\n      styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n\n\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {}\n\nMatTreeNodeToggle.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTreeNodeToggle_BaseFactory;\n  return function MatTreeNodeToggle_Factory(t) {\n    return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n  };\n}();\n\nMatTreeNodeToggle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodeToggle,\n  selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n  inputs: {\n    recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeToggle,\n    useExisting: MatTreeNodeToggle\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }],\n      inputs: ['recursive: matTreeNodeToggleRecursive']\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n\nclass MatTreeModule {}\n\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) {\n  return new (t || MatTreeModule)();\n};\n\nMatTreeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatTreeModule\n});\nMatTreeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CdkTreeModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, MatCommonModule],\n      exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n      declarations: MAT_TREE_DIRECTIVES\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\n\n\nclass MatTreeFlattener {\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n\n  _flattenNode(node, level, resultNodes, parentMap) {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n\n    return resultNodes;\n  }\n\n  _flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach((child, index) => {\n      let childParentMap = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n\n\n  flattenNodes(structuredData) {\n    let resultNodes = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n\n\n  expandFlattenedNodes(nodes, treeControl) {\n    let results = [];\n    let currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(node => {\n      let expand = true;\n\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n\n      if (expand) {\n        results.push(node);\n      }\n\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\n\n\nclass MatTreeFlatDataSource extends DataSource {\n  constructor(_treeControl, _treeFlattener, initialData) {\n    super();\n    this._treeControl = _treeControl;\n    this._treeFlattener = _treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject([]);\n\n    if (initialData) {\n      // Assign the data through the constructor to ensure that all of the logic is executed.\n      this.data = initialData;\n    }\n  }\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(value) {\n    this._data.next(value);\n\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  connect(collectionViewer) {\n    return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n      this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {// no op\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\n\n\nclass MatTreeNestedDataSource extends DataSource {\n  constructor() {\n    super(...arguments);\n    this._data = new BehaviorSubject([]);\n  }\n  /**\n   * Data for the nested tree\n   */\n\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(value) {\n    this._data.next(value);\n  }\n\n  connect(collectionViewer) {\n    return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n  }\n\n  disconnect() {// no op\n  }\n\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };","map":{"version":3,"names":["i1","CdkTreeNode","CdkTreeNodeDef","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodePadding","CdkTreeNodeOutlet","CdkTree","CdkTreeNodeToggle","CdkTreeModule","i0","Directive","Attribute","Input","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","mixinTabIndex","mixinDisabled","MatCommonModule","coerceBooleanProperty","DataSource","BehaviorSubject","merge","take","map","_MatTreeNodeBase","MatTreeNode","constructor","elementRef","tree","tabIndex","Number","ngOnInit","ngOnDestroy","ɵfac","ElementRef","ɵdir","provide","useExisting","type","args","selector","exportAs","inputs","providers","host","undefined","decorators","MatTreeNodeDef","data","MatNestedTreeNode","differs","_disabled","disabled","value","_tabIndex","ngAfterContentInit","IterableDiffers","node","MatTreeNodePadding","level","_level","_setLevelInput","indent","_indent","_setIndentInput","MatTreeNodeOutlet","viewContainer","_node","ViewContainerRef","MatTree","ɵcmp","template","encapsulation","None","changeDetection","Default","styles","_nodeOutlet","static","MatTreeNodeToggle","MAT_TREE_DIRECTIVES","MatTreeModule","ɵmod","ɵinj","imports","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","_expandedData","_data","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","changed","disconnect","MatTreeNestedDataSource","arguments"],"sources":["C:/Users/marcus/Desktop/AppGit/CSharpAngular/SonnyC/views/node_modules/@angular/material/fesm2015/tree.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends _MatTreeNodeBase {\n    constructor(elementRef, tree, tabIndex) {\n        super(elementRef, tree);\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTreeNode, selector: \"mat-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, host: { classAttribute: \"mat-tree-node\" }, providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }], exportAs: [\"matTreeNode\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-tree-node',\n                    exportAs: 'matTreeNode',\n                    inputs: ['role', 'disabled', 'tabIndex'],\n                    providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }],\n                    host: {\n                        'class': 'mat-tree-node',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }];\n    } });\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodeDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodeDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTreeNodeDef, selector: \"[matTreeNodeDef]\", inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodeDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeDef]',\n                    inputs: ['when: matTreeNodeDefWhen'],\n                    providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }],\n                }]\n        }], propDecorators: { data: [{\n                type: Input,\n                args: ['matTreeNode']\n            }] } });\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    constructor(elementRef, tree, differs, tabIndex) {\n        super(elementRef, tree, differs);\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    /** Whether the node is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /** Tabindex for the node. */\n    get tabIndex() {\n        return this.disabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatNestedTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: i0.IterableDiffers }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatNestedTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatNestedTreeNode, selector: \"mat-nested-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, host: { classAttribute: \"mat-nested-tree-node\" }, providers: [\n        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n    ], exportAs: [\"matNestedTreeNode\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatNestedTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-nested-tree-node',\n                    exportAs: 'matNestedTreeNode',\n                    inputs: ['role', 'disabled', 'tabIndex'],\n                    providers: [\n                        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n                    ],\n                    host: {\n                        'class': 'mat-nested-tree-node',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }];\n    }, propDecorators: { node: [{\n                type: Input,\n                args: ['matNestedTreeNode']\n            }], disabled: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }] } });\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() {\n        return this._level;\n    }\n    set level(value) {\n        this._setLevelInput(value);\n    }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    get indent() {\n        return this._indent;\n    }\n    set indent(indent) {\n        this._setIndentInput(indent);\n    }\n}\nMatTreeNodePadding.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodePadding, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodePadding.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTreeNodePadding, selector: \"[matTreeNodePadding]\", inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodePadding, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodePadding]',\n                    providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }],\n                }]\n        }], propDecorators: { level: [{\n                type: Input,\n                args: ['matTreeNodePadding']\n            }], indent: [{\n                type: Input,\n                args: ['matTreeNodePaddingIndent']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodeOutlet, deps: [{ token: i0.ViewContainerRef }, { token: CDK_TREE_NODE_OUTLET_NODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodeOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\", providers: [\n        {\n            provide: CdkTreeNodeOutlet,\n            useExisting: MatTreeNodeOutlet,\n        },\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodeOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeOutlet]',\n                    providers: [\n                        {\n                            provide: CdkTreeNodeOutlet,\n                            useExisting: MatTreeNodeOutlet,\n                        },\n                    ],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TREE_NODE_OUTLET_NODE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTree, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatTree.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTree, selector: \"mat-tree\", host: { attributes: { \"role\": \"tree\" }, classAttribute: \"mat-tree\" }, providers: [{ provide: CdkTree, useExisting: MatTree }], viewQueries: [{ propertyName: \"_nodeOutlet\", first: true, predicate: MatTreeNodeOutlet, descendants: true, static: true }], exportAs: [\"matTree\"], usesInheritance: true, ngImport: i0, template: `<ng-container matTreeNodeOutlet></ng-container>`, isInline: true, styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"], directives: [{ type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTree, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tree', exportAs: 'matTree', template: `<ng-container matTreeNodeOutlet></ng-container>`, host: {\n                        'class': 'mat-tree',\n                        'role': 'tree',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [{ provide: CdkTree, useExisting: MatTree }], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"] }]\n        }], propDecorators: { _nodeOutlet: [{\n                type: ViewChild,\n                args: [MatTreeNodeOutlet, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n}\nMatTreeNodeToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodeToggle, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatTreeNodeToggle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatTreeNodeToggle, selector: \"[matTreeNodeToggle]\", inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeNodeToggle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeToggle]',\n                    providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }],\n                    inputs: ['recursive: matTreeNodeToggleRecursive'],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet,\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatTreeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeModule, declarations: [MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet], imports: [CdkTreeModule, MatCommonModule], exports: [MatCommonModule, MatNestedTreeNode,\n        MatTreeNodeDef,\n        MatTreeNodePadding,\n        MatTreeNodeToggle,\n        MatTree,\n        MatTreeNode,\n        MatTreeNodeOutlet] });\nMatTreeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeModule, imports: [[CdkTreeModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatTreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkTreeModule, MatCommonModule],\n                    exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                    declarations: MAT_TREE_DIRECTIVES,\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let results = [];\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n    constructor(_treeControl, _treeFlattener, initialData) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject([]);\n        if (initialData) {\n            // Assign the data through the constructor to ensure that all of the logic is executed.\n            this.data = initialData;\n        }\n    }\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    connect(collectionViewer) {\n        return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n    }\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}